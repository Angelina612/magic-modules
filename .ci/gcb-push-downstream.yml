---
steps:
    # The GCB / GH integration doesn't satisfy our use case perfectly.
    # It doesn't check out the repo itself - it only gives us the actual code.
    # So we need to handle that access ourselves - which means deleting the code
    # and cloning the repo to the present directory.  We need to use
    # 'sh' to evaluate the '*' arguments, which otherwise would be
    # passed literally to 'rm'.
    - name: 'alpine'
      args:
          - sh
          - -c
          - rm -rf ./* ./.* || true
    - name: 'gcr.io/cloud-builders/git'
      id: clone
      args:
          - clone
          - https://github.com/GoogleCloudPlatform/magic-modules
          - .

    - name: 'gcr.io/cloud-builders/git'
      id: checkout
      args:
          - checkout
          - $COMMIT_SHA

    - name: 'gcr.io/graphite-docker-images/build-environment'
      entrypoint: '/workspace/.ci/scripts/build-environment/downstream-builder/generate_downstream.sh'
      secretEnv: ["GITHUB_TOKEN"]
      id: tpg-push
      env:
        - BASE_BRANCH=$BRANCH_NAME
      args:
          - 'downstream'
          - 'terraform'
          - 'ga'
          - $COMMIT_SHA

#test 2
# set extremely long 1 day timeout, in order to ensure that any jams / backlogs can be cleared.
timeout: 86400s
options:
    machineType: 'N1_HIGHCPU_32'

logsBucket: 'gs://cloudbuild-downstream-builder-logs'
availableSecrets:
  secretManager:
    - versionName: projects/673497134629/secrets/github-classic--repo-workflow/versions/latest
      env: GITHUB_TOKEN
